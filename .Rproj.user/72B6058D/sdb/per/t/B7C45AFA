{
    "collab_server" : "",
    "contents" : "\n##TODO\n\n# Do I have the most recent version of the veg classes?\n\n###############\n## Clear the workspace\n###############\n\nrm(list=ls())\n\n###############\n## Global vars\n###############\n\nSUMMER = TRUE   # FALSE # \n\nWINTER = !SUMMER\n\n\nMODELSRUN <- TRUE\n\n\n##############\n# Load packages\n###############\n\nlibrary(lme4) #load lme4 package\nlibrary(Hmisc)\nlibrary(MuMIn)\nlibrary(ROCR)\nlibrary(rms)\nlibrary(RColorBrewer)\n\n#### Read in the RF functions from github\n\nsource(\"RF_Extensions.R\")   # change to your script locations\n\n\n################\n# Load functions\n################\n\n####################\n## Function for visualizing interactions\n####################\n\n\nVisualizeInteraction <- function(data=deer[[\"summer\"]],model=GLMMs[[\"summer\"]],var1=\"dist_to_water\",var2=\"elevation\",type=\"GLMM\"){\n  len <- 50\n  if(type==\"GLMM\"){\n    standvar1 <- sprintf(\"stand_%s\",var1)\n    standvar2 <- sprintf(\"stand_%s\",var2)\n    realmean1 <- mean(data[,var1])\n    realsd1 <- sd(data[,var1])\n    realmean2 <- mean(data[,var2])\n    realsd2 <- sd(data[,var2])\n  }else{\n    standvar1 <- var1\n    standvar2 <- var2\n  }\n  \n  firstdim <- data[,standvar1]\n  seconddim <- data[,standvar2]\n  range1 <- seq(min(firstdim),max(firstdim),length=len)\n  range2 <- seq(min(seconddim),max(seconddim),length=len)\n  newdata <- expand.grid(range1,range2)\n  # head(newdata,50)\n  names(newdata) <- c(standvar1,standvar2)\n  \n  if(type==\"GLMM\"){ \n    allvars <- names(model@frame)\n  }else{\n    allvars <- pred.names\n  }\n  othervars <- allvars[!allvars%in%c(standvar1,standvar2,\"used\")]\n  \n  var = othervars[2]\n  for(var in othervars){\n    thisvar <- data[,var]\n    if(is.factor(thisvar)){\n      tab <- table(thisvar)\n      vals <- names(tab)\n      levs <- levels(thisvar)\n      mostcom <- vals[which.max(tab)]\n      newvec <- factor(rep(mostcom,times=nrow(newdata)),levels=levs)\n      newdata[,var] <- newvec\n    }else{\n      newdata[,var] <- mean(thisvar)\n    }\n  }\n  \n  if(type==\"GLMM\"){\n    pred <- plogis(predict(model,newdata))\n  }else{\n    i=pred.names[3]\n    for(i in pred.names){\n      if(dataclasses[i]==\"integer\") newdata[,i] <- as.integer(round(newdata[,i]))\n    }\n    pred <- numeric(nrow(newdata))\n    i=1\n    for(i in 1:nrow(newdata)){\n      pred[i]<-as.numeric(predict(model,newdata[i,],OOB=TRUE,type=\"prob\")[[1]][,2])\n    } \n  }\n  \n  predmat <-  matrix(pred,nrow=len,ncol=len)\n  \n  par(mai=c(0,0,0,0))\n  \n  if(type==\"GLMM\"){\n    persp(realmean1+realsd1*range1,realmean2+realsd2*range2,predmat,xlab=var1,ylab=var2,theta = 55, phi = 40, r = sqrt(10), d = 3, \n        ticktype = \"detailed\", mgp = c(4, 1, 0))\n  }else{\n    persp(range1,range2,predmat,xlab=var1,ylab=var2,theta = 55, phi = 40, r = sqrt(10), d = 3, \n          ticktype = \"detailed\", mgp = c(4, 1, 0))\n  }\n  \n}\n\n####################\n## Function for visualizing univariate relations\n####################\n\nVisualizeRelation <- function(data=deer[[\"summer\"]],model=GLMMs[[\"summer\"]],predvar=\"dist_to_water\",type=\"RF\"){\n  len <- 100\n  \n  isfac <- is.factor(data[[predvar]])\n  \n  dataclasses <- sapply(data,class)\n  \n  if(!isfac){\n    if(type==\"GLMM\"){\n      standvar <- sprintf(\"stand_%s\",predvar)\n    }else{\n      standvar <- predvar\n    }\n    dim <- data[,standvar]\n    range <- seq(min(dim),max(dim),length=len)\n    \n    realmean <- mean(data[,predvar])\n    realsd <- sd(data[,predvar])\n    \n    newdata <- data.frame(temp=range)\n    # head(newdata,50)\n    names(newdata) <- c(standvar)\n    if(type==\"GLMM\"){ \n      allvars <- names(model@frame)\n    }else{\n      allvars <- pred.names\n    }\n    othervars <- allvars[!allvars%in%c(standvar,\"used\")]\n  }else{\n    faclevs <- levels(data[[predvar]])\n    newdata <- data.frame(temp=factor(faclevs,levels=faclevs))\n    names(newdata) <- c(predvar)\n    if(type==\"GLMM\"){ \n      allvars <- names(model@frame)\n    }else{\n      allvars <- pred.names\n    }\n    othervars <- allvars[!allvars%in%c(predvar,\"used\")]\n  }\n  \n  var = othervars[2]\n  for(var in othervars){\n    thisvar <- data[,var]\n    if(is.factor(thisvar)){\n      tab <- table(thisvar)\n      vals <- names(tab)\n      levs <- levels(thisvar)\n      mostcom <- vals[which.max(tab)]\n      newvec <- factor(rep(mostcom,times=nrow(newdata)),levels=levs)\n      newdata[,var] <- newvec\n    }else{\n      newdata[,var] <- mean(thisvar)\n    }\n  }\n  \n  if(type==\"GLMM\"){\n    pred <- plogis(predict(model,newdata))\n  }else{\n    i=pred.names[3]\n    for(i in pred.names){\n      if(dataclasses[i]==\"integer\") newdata[,i] <- as.integer(round(newdata[,i]))\n    }\n    pred <- numeric(nrow(newdata))\n    i=1\n    for(i in 1:nrow(newdata)){\n     pred[i]<-as.numeric(predict(model,newdata[i,],OOB=TRUE,type=\"prob\")[[1]][,2])\n    } \n  }\n  \n  if(!isfac){\n    plot(range,pred,xlab=predictorNames[pred.names==predvar],ylab=\"Use probability\",type=\"l\",lwd=2,xaxt=\"n\")\n    ats <- seq(min(range),max(range),length=6)\n    if(type==\"GLMM\"){\n      axis(1,ats,labels = round(realmean+ats*realsd))\n    }else{\n      axis(1,ats,labels = round(ats))\n    }\n    rug(jitter(data[seq(1,nrow(data),50),standvar]), ticksize = 0.03, side = 1, lwd = 0.5, col = par(\"fg\"))\n  }else{\n    par(mai=c(1.5,1,1,.2))\n    plot(pred~newdata[,1],xlab=\"\",main=predictorNames[pred.names==predvar],ylab=\"Use probability\",lwd=2,las=2)\n  }\n}\n\n\n################\n## Read in Data\n################\n\n  #setwd(\"K:\\\\public\\\\Nathan_Jackson\\\\Methods_Paper\\\\R Input\")\n\nsummerdeer=read.csv('summer_main_modeldata_new25May2017.csv')  # read data file into R\n\nsummerdeer$altid=factor(summerdeer$altid) # convert catagorical variable to a vector of factor variables\nsummerdeer$veg_class=factor(summerdeer$veg_class)\n\n\nwinterdeer=read.csv('winter data 6_28_17.csv')  # read data file into R  winter_main_modeldata_new5May2017.csv\n\nwinterdeer$altid=factor(winterdeer$altid) # convert catagorical variable to a vector of factor variables\nwinterdeer$veg_class=factor(winterdeer$veg_class)\n\n\n##############\n# Standardize covariates\n##############\n\nsummerdeer$stand_dist_to_water=(summerdeer$dist_to_water-mean(summerdeer$dist_to_water))/sd(summerdeer$dist_to_water)\nsummerdeer$stand_cos_aspect=(summerdeer$cos_aspect-mean(summerdeer$cos_aspect))/sd(summerdeer$cos_aspect)\nsummerdeer$stand_sin_aspect=(summerdeer$sin_aspect-mean(summerdeer$sin_aspect))/sd(summerdeer$sin_aspect)\nsummerdeer$stand_elevation=(summerdeer$elevation-mean(summerdeer$elevation))/sd(summerdeer$elevation)\nsummerdeer$stand_slope=(summerdeer$slope-mean(summerdeer$slope))/sd(summerdeer$slope)\n\n\nwinterdeer$stand_dist_to_water=(winterdeer$dist_to_water-mean(winterdeer$dist_to_water))/sd(winterdeer$dist_to_water)\nwinterdeer$stand_cos_aspect=(winterdeer$cos_aspect-mean(winterdeer$cos_aspect))/sd(winterdeer$cos_aspect)\nwinterdeer$stand_sin_aspect=(winterdeer$sin_aspect-mean(winterdeer$sin_aspect))/sd(winterdeer$sin_aspect)\nwinterdeer$stand_elevation=(winterdeer$elevation-mean(winterdeer$elevation))/sd(winterdeer$elevation)\nwinterdeer$stand_slope=(winterdeer$slope-mean(winterdeer$slope))/sd(winterdeer$slope)\n\n\nsummerdeer$used_fac=factor(summerdeer$used)\n\nwinterdeer$used_fac=factor(winterdeer$used)\n\ndeer <- list()\n\ndeer[[\"summer\"]] <- summerdeer\ndeer[[\"winter\"]] <- winterdeer\n\nrm(summerdeer,winterdeer)\n\n###############\n# Naming covariables\n###############\n\n############### NAMING VARIABLES ############\n\npredictorNames <- c(  \"Cos Aspect\", # nice readable names\n                      \"Sin Aspect\",\n                      \"Elevation\",\n                      \"Slope\",\n                      \"Vegetation Class\",\n                      \"Distance to Water\"\n)\n\npred.names=c(  \"cos_aspect\",\n               \"sin_aspect\",\n               \"elevation\",\n               \"slope\",\n               \"veg_class\",\n               \"dist_to_water\"\n               \n)\n\n\n#name check\ncbind(pred.names,predictorNames)\n\nstand_pred.names <- paste(\"stand_\",pred.names,sep=\"\")\n\n\n\n##################\n## Run the generalized linear mixed model   [note: kelley's code has * instead of :  -- not sure if it was right!]\n##################\n\n#   MODELSRUN <- FALSE\nif(MODELSRUN){\n  load(\"summerGLMM.RData\")\n  load(\"winterGLMM.RData\")\n  \n  GLMMs <- list()\n  GLMMs[[\"winter\"]] <- winterGLMM\n  GLMMs[[\"summer\"]] <- summerGLMM\n  \n  rm(summerGLMM,winterGLMM)\n  \n}else{\n  summerGLMM=glmer(used~stand_dist_to_water + stand_cos_aspect + stand_sin_aspect + \n                              stand_elevation + stand_slope + veg_class + stand_elevation:stand_slope +\n                              stand_dist_to_water:stand_slope + stand_dist_to_water:stand_elevation +\n                              (1|altid), family=\"binomial\", data=deer[[\"summer\"]],na.action=\"na.fail\") # generalized linear mixed effect\n  \n  winterGLMM=glmer(used~stand_dist_to_water + stand_cos_aspect + stand_sin_aspect + \n                              stand_elevation + stand_slope + veg_class +  stand_elevation:stand_slope +\n                              stand_dist_to_water:stand_slope +\n                              (1|altid), family=\"binomial\", data=deer[[\"winter\"]],na.action=\"na.fail\") # generalized linear mixed effect \n                           \n    \n  GLMMs <- list()\n  GLMMs[[\"winter\"]] <- winterGLMM\n  GLMMs[[\"summer\"]] <- summerGLMM\n  \n  # summary(summer_pequop_final)\n  save(summerGLMM,file = \"summerGLMM.RData\")\n  save(winterGLMM,file = \"winterGLMM.RData\")\n  \n  rm(summerGLMM,winterGLMM)\n}\n\n\n\n##################\n## Run the Random Forest model\n##################\n\n#### Define response variable\n\nresponse=\"used_fac\" \n\n\n#### Define our formula (response ~ predictors)\n\n#   MODELSRUN <- FALSE\nif(MODELSRUN){\n  load(\"summerRF.RData\")\n  load(\"winterRF.RData\")\n  \n  RFs <- list()\n  RFs[[\"winter\"]] <- winterRF\n  RFs[[\"summer\"]] <- summerRF\n  RFs[[\"winter_importance\"]] <- winter_importance\n  RFs[[\"summer_importance\"]] <- summer_importance\n  \n  rm(summerRF,summer_importance,winterRF,winter_importance)\n  \n}else{\n  formula1 <- as.formula(paste(response,\"~\",paste(pred.names,collapse=\"+\")))\n  \n  cforestControl <- cforest_unbiased(ntree=500,mtry=3)   # change back to 500!!\n  cforestControl@fraction <- 0.03\n  \n  summerRF <- cforest(formula1, controls=cforestControl, data=deer[[\"summer\"]])\n  # get the importance values\n  summer_importance<-varimp((summerRF), conditional= FALSE)\n  \n  \n  winterRF <- cforest(formula1, controls=cforestControl, data=deer[[\"winter\"]])\n  # get the importance values\n  winter_importance<-varimp((winterRF), conditional= FALSE)\n  \n  RFs <- list()\n  RFs[[\"winter\"]] <- winterRF\n  RFs[[\"summer\"]] <- summerRF\n  RFs[[\"winter_importance\"]] <- winter_importance\n  RFs[[\"summer_importance\"]] <- summer_importance\n  \n  # summary(summer_pequop_final)\n  save(summerRF,summer_importance,file = \"summerRF.RData\")\n  save(winterRF,winter_importance,file = \"winterRF.RData\")\n  \n  rm(summerRF,summer_importance,winterRF,winter_importance)\n}\n\n\n#   MODELSRUN <- TRUE\n\n\n#######################\n# Visualize importance values\n#######################\n\ngraphics.off()\n\nsvg(\"importancefig.svg\",height=7,width=7)\n\npar(mfcol=c(2,2))\npar(mai=c(1,1.5,0.6,0.4))\nlengthndx <- length(RFs[[impname]])\ncol <- rainbow(lengthndx, start = 3/6, end = 4/6)      # rep(brewer.pal(6,\"Blues\"),each=2)\n\n\nseason <- \"summer\"\nimpname <- sprintf(\"%s_importance\",season)\n\nbarplot(height=RFs[[impname]][order(RFs[[impname]],decreasing = FALSE)],\n        horiz=T,las=1,main=\"Importance of Predictors, RF\",\n        xlab=\"Index of overall importance\",col=col,           \n        names.arg=predictorNames[match(names(RFs[[impname]]),pred.names)][order(RFs[[impname]],decreasing = FALSE)])\n\n\nseason <- \"winter\"\nimpname <- sprintf(\"%s_importance\",season)\n\n\n\nbarplot(height=RFs[[impname]][order(RFs[[impname]],decreasing = FALSE)],\n        horiz=T,las=1,main=\"Importance of Predictors, RF\",\n        xlab=\"Index of overall importance\",col=col,           \n        names.arg=predictorNames[match(names(RFs[[impname]]),pred.names)][order(RFs[[impname]],decreasing = FALSE)])\n\n\n##########\n# GLM \"importance\"? (coefficients of standardized variables?)\n##########\n\n\nseason=\"summer\"\nsumm <- summary(GLMMs[[season]])\n\nallvars <- names(summ$coefficients[,1])\n\n# remove interactions\nallvars <- allvars[-grep(\":\",allvars)]\n\n# keep the standardized vars\n\nallvars <- allvars[grep(\"stand\",allvars)]\n\nglm_importance <- summ$coefficients[,1][allvars]\n\n#glm_importance <- glm_importance[order(abs(glm_importance),decreasing = T)]\n\nbarplot(height=glm_importance[order(abs(glm_importance),decreasing = FALSE)],\n        horiz=T,las=1,main=\"Standardized coefficients, GLMM\",\n        xlab=\"Standardized coefficient\",col=col,           \n        names.arg=predictorNames[match(names(glm_importance),stand_pred.names)][order(abs(glm_importance),decreasing = FALSE)])\n\n\n\n\nseason=\"winter\"\nsumm <- summary(GLMMs[[season]])\n\nallvars <- names(summ$coefficients[,1])\n\n    # remove interactions\nallvars <- allvars[-grep(\":\",allvars)]\n\n    # keep the standardized vars\n\nallvars <- allvars[grep(\"stand\",allvars)]\n\nglm_importance <- summ$coefficients[,1][allvars]\n\n#glm_importance <- glm_importance[order(abs(glm_importance),decreasing = T)]\n\nbarplot(height=glm_importance[order(abs(glm_importance),decreasing = FALSE)],\n         horiz=T,las=1,main=\"Standardized coefficients, GLMM\",\n         xlab=\"Standardized coefficient\",col=col,           \n         names.arg=predictorNames[match(names(glm_importance),stand_pred.names)][order(abs(glm_importance),decreasing = FALSE)])\n\n\ndev.off()\n\n## note: comparison of RF vs GLMM \"importance\" values vs regression coefficients of standardized variables for RSF can \n    #  indicate the degree to which nonlinearities and interactions play a role!\n\n## note: RF gives an overall importance of categorical vars, GLMM cannot do that!\n\n\n\n\n#######################\n## Visualize univariate relationships\n#######################\n\npred.names\n\n## NOTE: we need to convert to real scale for the axes (unstandardized)\n\nseason <- \"summer\"\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"cos_aspect\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"sin_aspect\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"elevation\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"slope\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"veg_class\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"dist_to_water\",type=\"GLMM\")\n\nseason <- \"winter\"\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"cos_aspect\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"sin_aspect\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"elevation\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"slope\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"veg_class\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"dist_to_water\",type=\"GLMM\")\n\n\nseason=\"summer\"\ngraphics.off()\n\nsvg(\"summerunivarplots.svg\",6,6)\npar(mfcol=c(3,2))\npar(mai=c(0.8,0.8,0,0))\n\n\nVisualizeRelation(data=deer[[season]],model=RFs[[season]],predvar=\"elevation\",type=\"RF\")\nVisualizeRelation(data=deer[[season]],model=RFs[[season]],predvar=\"slope\",type=\"RF\")\nVisualizeRelation(data=deer[[season]],model=RFs[[season]],predvar=\"dist_to_water\",type=\"RF\")\n\n\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"elevation\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"slope\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"dist_to_water\",type=\"GLMM\")\n\ndev.off()\n\ngraphics.off()\nseason <- \"winter\"\nsvg(\"winterunivariateplots.svg\",6,6)\n\npar(mfcol=c(3,2))\npar(mai=c(0.8,0.8,0,0))\n\n\nVisualizeRelation(data=deer[[season]],model=RFs[[season]],predvar=\"elevation\",type=\"RF\")\nVisualizeRelation(data=deer[[season]],model=RFs[[season]],predvar=\"slope\",type=\"RF\")\nVisualizeRelation(data=deer[[season]],model=RFs[[season]],predvar=\"dist_to_water\",type=\"RF\")\n\n\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"elevation\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"slope\",type=\"GLMM\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"dist_to_water\",type=\"GLMM\")\n\ndev.off()\n\n\ngraphics.off()\nseason=\"summer\"\nsvg(\"vegplots.svg\",6,6)\n\npar(mfrow=c(2,2))\npar(mai=c(1.5,0.8,0,0))\n\nVisualizeRelation(data=deer[[season]],model=RFs[[season]],predvar=\"veg_class\",type=\"RF\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"veg_class\",type=\"GLMM\")\n\n\n\nseason=\"winter\"\n#svg(\"wintervegplots.svg\",6,5)\n\nVisualizeRelation(data=deer[[season]],model=RFs[[season]],predvar=\"veg_class\",type=\"RF\")\nVisualizeRelation(data=deer[[season]],model=GLMMs[[season]],predvar=\"veg_class\",type=\"GLMM\")\n\ndev.off()\n\n#######################\n## Visualize interactions\n########################\n\n\ngraphics.off()\n\nseason <- \"summer\"\n\n\nVisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"dist_to_water\",var2=\"elevation\")\n\n#VisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"stand_elevation\",var2=\"stand_dist_to_water\")\n\n#VisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"stand_slope\",var2=\"stand_dist_to_water\")\n\nVisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var2=\"slope\",var1=\"dist_to_water\")\n\nVisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"slope\",var2=\"elevation\")\n\n\n\nseason <- \"winter\"\n\nVisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"dist_to_water\",var2=\"elevation\")\n\n#VisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"stand_elevation\",var2=\"stand_dist_to_water\")\n\n#VisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"stand_slope\",var2=\"stand_dist_to_water\")\n\nVisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var2=\"slope\",var1=\"dist_to_water\")\n\nVisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"slope\",var2=\"elevation\")\n\n#VisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"stand_slope\",var2=\"stand_elevation\")\n\n\ngraphics.off()\nsvg(\"disttowater_vs_elevation.svg\",6,6)\npar(mfrow=c(2,2))\n\nseason <- \"summer\"\nVisualizeInteraction(data=deer[[season]],model=RFs[[season]],var1=\"dist_to_water\",var2=\"elevation\",type=\"RF\")\nVisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"dist_to_water\",var2=\"elevation\",type=\"GLMM\")\n\n\nseason <- \"winter\"\nVisualizeInteraction(data=deer[[season]],model=RFs[[season]],var1=\"dist_to_water\",var2=\"elevation\",type=\"RF\")\nVisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"dist_to_water\",var2=\"elevation\",type=\"GLMM\")\n\ndev.off()\n\n\ngraphics.off()\nsvg(\"slope_vs_elevation.svg\",6,6)\npar(mfrow=c(2,2))\n\nseason <- \"summer\"\nVisualizeInteraction(data=deer[[season]],model=RFs[[season]],var1=\"slope\",var2=\"elevation\",type=\"RF\")\nVisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"slope\",var2=\"elevation\",type=\"GLMM\")\n\n\nseason <- \"winter\"\nVisualizeInteraction(data=deer[[season]],model=RFs[[season]],var1=\"slope\",var2=\"elevation\",type=\"RF\")\nVisualizeInteraction(data=deer[[season]],model=GLMMs[[season]],var1=\"slope\",var2=\"elevation\",type=\"GLMM\")\n\ndev.off()\n\n\n\n#################\n# MODEL SELECTION: GLMM\n#################\n\n\nif(!MODELSRUN){\n  \n  #### Summer Global model\n  \n  summer_pequop_model=glmer(used~stand_dist_to_water +\n                              stand_cos_aspect + \n                              stand_sin_aspect +\n                              stand_elevation +\n                              stand_slope +\n                              veg_class +\n                              stand_dist_to_water:stand_elevation + \n                              stand_dist_to_water:stand_slope +\n                              stand_elevation:stand_slope + \n                              (1|altid),\n              family=\"binomial\",data=deer$summer,nAGQ = 1, na.action=\"na.fail\") # generalized linear mixed effect \n  \n  \n  summer_dred <- dredge(summer_pequop_model, trace = TRUE, rank = \"AICc\", REML = FALSE)\n  summer_dred\n  \n  model_summary_summer <- summary(summer_pequop_model)\n  \n  write.csv(model_summary_summer$coefficients, file= \"top_summer_main_result19April2017.csv\")\n  write.csv(summer_dred, file= \"summer_main_dredge_result_10April2017.csv\")\n  \n  \n  #### Winter Global model\n  \n  winter_pequop_model=glmer(used~stand_dist_to_water +\n                              stand_cos_aspect + \n                              stand_sin_aspect +\n                              stand_elevation +\n                              stand_slope +\n                              veg_class +\n                              stand_dist_to_water:stand_elevation + \n                              stand_dist_to_water:stand_slope +\n                              stand_elevation:stand_slope + \n                              (1|altid),\n                            family=\"binomial\",data=deer$winter,nAGQ = 1, na.action=\"na.fail\") # generalized linear mixed effect \n  \n  model_summary_winter <- summary(winter_pequop_model)\n  \n  winter_dred<- dredge(winter_pequop_model, trace = TRUE, rank = \"AICc\", REML = FALSE)\n  winter_dred\n  \n  write.csv(model_summary_winter$coefficients, file= \"top_winter_main_result19April2017.csv\")\n  write.csv(winter_dred, file= \"winter_main_dredge_result_10April2017.csv\")\n  \n\n  \n\n}\n\n\n\n\n\n######################\n# RF Interactions\n######################\n\nRF_int <- list()\n\nseason <- \"summer\"\n\n# NOTE: this one can take a very long time   ...\nRF_int[[season]] <- RF_FindInteractions(object=RFs[[season]],data=deer[[season]],predictors=pred.names)\n\n### plot interaction strength\ngraphics.off()\nlengthndx <- min(9,nrow(RF_int[[season]]$rank.list1))\npar(mai=c(0.95,3.1,0.6,0.4))\n#ndx <- ndx <- which(predictors%in%pred.names)\nbarplot(height=(RF_int[[season]]$rank.list1[c(1:min(9,nrow(RF_int[[season]]$rank.list1))),5][c(lengthndx:1)]),\n        horiz=T,las=1,main=paste(response, sep=\"\"),\n        xlab=\"Index of interaction strength\",col=brewer.pal(lengthndx,\"Blues\"),           \n        names.arg=paste(\"\",predictorNames[match(RF_int[[season]]$rank.list1[,2][c(lengthndx:1)],pred.names)],\"\\n\",predictorNames[match(RF_int[[season]]$rank.list1[,4][c(lengthndx:1)],pred.names)],sep=\"\") )\n\n\n\nRF_int[[season]]$rank.list1\n\nseason <- \"winter\"\n\n# NOTE: this one can take a very long time   ...\nRF_int[[season]] <- RF_FindInteractions(object=RFs[[season]],data=deer[[season]],predictors=pred.names)\n\n### plot interaction strength\ngraphics.off()\nlengthndx <- min(9,nrow(RF_int[[season]]$rank.list1))\npar(mai=c(0.95,3.1,0.6,0.4))\n#ndx <- ndx <- which(predictors%in%pred.names)\nbarplot(height=(RF_int[[season]]$rank.list1[c(1:min(9,nrow(RF_int[[season]]$rank.list1))),5][c(lengthndx:1)]),\n        horiz=T,las=1,main=paste(response, sep=\"\"),\n        xlab=\"Index of interaction strength\",col=brewer.pal(lengthndx,\"Blues\"),           \n        names.arg=paste(\"\",predictorNames[match(RF_int[[season]]$rank.list1[,2][c(lengthndx:1)],pred.names)],\"\\n\",predictorNames[match(RF_int[[season]]$rank.list1[,4][c(lengthndx:1)],pred.names)],sep=\"\") )\n\n\n\nRF_int[[season]]$rank.list1\n\n\n\n##### CONDITIONAL INFERENCE TREE  ##################\n\nseason=\"winter\"\n\nsummer_deer <- ctree(formula=formula1, data=df, controls = ctree_control(mincriterion = 0.99,maxdepth = 4))\n\nplot(summer_deer)\n\nsummary(summer_deer)\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1498773263443.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "96322591",
    "id" : "B7C45AFA",
    "lastKnownWriteTime" : 1498841547,
    "last_content_update" : 1498841547250,
    "path" : "~/GitHub/Mule_Deer_RFvsRSF/METHODS_PAPER_MASTER_CODE.R",
    "project_path" : "METHODS_PAPER_MASTER_CODE.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}